package br.com.ctb.executorsql.main;

import java.io.File;

import org.apache.log4j.Logger;

import br.com.ctb.executorsql.dao.Dao;
import br.com.ctb.executorsql.exception.ArquivoImportacaoException;
import br.com.ctb.executorsql.exception.ControladorException;
import br.com.ctb.executorsql.exception.DaoException;
import br.com.ctb.executorsql.listener.ProgressoObservable;
import br.com.ctb.executorsql.util.ArquivoComando;
import br.com.ctb.executorsql.util.DiretorioComando;
import br.com.ctb.executorsql.util.ParametroBD;

public class Controlador {
	
	private static final Logger log = Logger.getLogger(Controlador.class);
	
	public void inserirBatch(ParametroBD parametroBD, File diretorio, ProgressoObservable observable) throws ControladorException {
		validarDiretorio(diretorio);

		log.info("--------------------------------------------------------------------");
		log.info("Iniciando importação ");
		
		Dao dao = new Dao(parametroBD);
		try {
			DiretorioComando diretorioComando = new DiretorioComando(diretorio);
			int totalArquivosNaPasta = diretorioComando.recuperarTotalArquivos();
			log.info("Total de arquivos na pasta: " + totalArquivosNaPasta);
			
			int arquivoAtual = 1;
			while (diretorioComando.possuiProximo()) {
				ArquivoComando arquivoComando = diretorioComando.recuperarProximoArquivo();
				
				log.info(String.format("Iniciando arquivo: %s", arquivoComando.recuperarNomeArquivo()));
				dao.insertBatch(parametroBD, arquivoComando);
				
				arquivoComando.moverArquivo();
				
				observable.notificarObservers(totalArquivosNaPasta, arquivoAtual++);
			}
		} catch (DaoException e) {
			tratarExcecao(e);
		} catch (ArquivoImportacaoException e) {
			tratarExcecao(e);
		} finally {
			try {
				dao.finalizarConexao();
			} catch (DaoException e) {
				tratarExcecao(e);
			}
		}
	}

	private void tratarExcecao(Exception e) throws ControladorException {
		log.error(e.getMessage(), e);
		throw new ControladorException(e.getMessage(), e);
	}

	private void validarDiretorio(File diretorio) throws ControladorException {
		if (diretorio != null && diretorio.canRead()) {
			if (diretorio.listFiles().length == 0) {
				throw new ControladorException("Favor informar um diretório que contenha arquivos para importação");
			}
		} else {
			throw new ControladorException("Diretório não informado");
		}
	}

}